{
  "filename": "docker-deployment.md",
  "__html": "<h2>QuickStart in Docker</h2>\n<p>Here're 2 ways to quickly install DolphinScheduler</p>\n<h3>The First Way：Start With docker-compose (Recommended)</h3>\n<p>In this way, you need to install docker-compose as a prerequisite, please install it yourself according to the rich docker-compose installation guidance on the Internet</p>\n<h5>1、 Download the Source Code Zip Package</h5>\n<ul>\n<li>Please download the latest version of the source code package and unzip it</li>\n</ul>\n<pre><code class=\"language-shell\">mkdir -p /opt/soft/dolphinscheduler;\ncd /opt/soft/dolphinscheduler;\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> download <span class=\"hljs-built_in\">source</span> code package</span>\nwget https://mirrors.tuna.tsinghua.edu.cn/apache/incubator/dolphinscheduler/1.3.4/apache-dolphinscheduler-incubating-1.3.4-src.zip\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> unzip</span>\nunzip apache-dolphinscheduler-incubating-1.3.4-src.zip\n \nmv apache-dolphinscheduler-incubating-1.3.4-src-release  dolphinscheduler-src\n</code></pre>\n<h5>2、 Install and Start the Service</h5>\n<pre><code>cd dolphinscheduler-src\ndocker-compose -f ./docker/docker-swarm/docker-compose.yml up -d\n</code></pre>\n<h5>3、 Login</h5>\n<p>Visit the front-end UI: <a href=\"http://192.168.xx.xx:8888\">http://192.168.xx.xx:8888</a></p>\n  <p align=\"center\">\n    <img src=\"/img/login_en.png\" width=\"60%\" />\n  </p>\nPlease refer to the `Quick Start` in the chapter 'User Manual' to explore how to use DolphinScheduler\n<h3>The Second way: Start in the Docker Mode</h3>\n<h5>1. Basic Required Software (please install by yourself)</h5>\n<ul>\n<li>PostgreSQL (8.2.15+)</li>\n<li>ZooKeeper (3.4.6+)</li>\n<li>Docker</li>\n</ul>\n<h5>2. Please login to the PostgreSQL database and create a database named <code>dolphinscheduler</code></h5>\n<h5>3. Initialize the database, import <code>sql/dolphinscheduler-postgre.sql</code> to create tables and initial data</h5>\n<h5>4. Download the DolphinScheduler Image</h5>\n<p>We have already uploaded user-oriented DolphinScheduler image to the Docker repository so that you can pull the image from the docker repository and self-build image not needed:</p>\n<pre><code>docker pull apache/dolphinscheduler:latest\n</code></pre>\n<h5>5. Run a DolphinScheduler Instance</h5>\n<p>Check follows:</p>\n<pre><code>$ docker run -dit --name dolphinscheduler \\\n-e ZOOKEEPER_QUORUM=&quot;l92.168.x.x:2181&quot;\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;{user}&quot; -e DATABASE_PASSWORD=&quot;{password}&quot; \\\n-p 8888:8888 \\\ndolphinscheduler all\n</code></pre>\n<p>Note: {user} and {password} need to be replaced with your database user name and password</p>\n<h5>6. Login</h5>\n<p>Visit the front-end UI: <a href=\"http://192.168.xx.xx:8888\">http://192.168.xx.xx:8888</a></p>\n  <p align=\"center\">\n    <img src=\"/img/login_en.png\" width=\"60%\" />\n  </p>\nPlease refer to the `Quick Start` in the chapter 'User Manual' to explore how to use DolphinScheduler\n<h2>Appendix</h2>\n<h3>The following services are automatically started when the container starts:</h3>\n<pre><code>     MasterServer ----- master service\n     WorkerServer ----- worker service\n     LoggerServer ----- logger service\n     ApiApplicationServer ----- API service\n     AlertServer ----- alert service\n</code></pre>\n<h3>If you just want to run part of the services in the DolphinScheduler</h3>\n<p>You can start selected services in DolphinScheduler by run the following commands.</p>\n<ul>\n<li>Start a <strong>master server</strong>, For example:</li>\n</ul>\n<pre><code>$ docker run -dit --name dolphinscheduler \\\n-e ZOOKEEPER_QUORUM=&quot;l92.168.x.x:2181&quot;\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\ndolphinscheduler master-server\n</code></pre>\n<ul>\n<li>Start a <strong>worker server</strong>, For example:</li>\n</ul>\n<pre><code>$ docker run -dit --name dolphinscheduler \\\n-e ZOOKEEPER_QUORUM=&quot;l92.168.x.x:2181&quot;\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\ndolphinscheduler worker-server\n</code></pre>\n<ul>\n<li>Start a <strong>api server</strong>, For example:</li>\n</ul>\n<pre><code>$ docker run -dit --name dolphinscheduler \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\n-p 12345:12345 \\\ndolphinscheduler api-server\n</code></pre>\n<ul>\n<li>Start a <strong>alert server</strong>, For example:</li>\n</ul>\n<pre><code>$ docker run -dit --name dolphinscheduler \\\n-e DATABASE_HOST=&quot;192.168.x.x&quot; -e DATABASE_PORT=&quot;5432&quot; -e DATABASE_DATABASE=&quot;dolphinscheduler&quot; \\\n-e DATABASE_USERNAME=&quot;test&quot; -e DATABASE_PASSWORD=&quot;test&quot; \\\ndolphinscheduler alert-server\n</code></pre>\n<ul>\n<li>Start a <strong>frontend</strong>, For example:</li>\n</ul>\n<pre><code>$ docker run -dit --name dolphinscheduler \\\n-e FRONTEND_API_SERVER_HOST=&quot;192.168.x.x&quot; -e FRONTEND_API_SERVER_PORT=&quot;12345&quot; \\\n-p 8888:8888 \\\ndolphinscheduler frontend\n</code></pre>\n<p><strong>Note</strong>: You must specify the following environment variables: <code>DATABASE_HOST</code> <code>DATABASE_PORT</code> <code>DATABASE_DATABASE</code> <code>DATABASE_USERNAME</code> <code>DATABASE_PASSWORD</code> <code>ZOOKEEPER_QUORUM</code> when start part of the DolphinScheduler services.</p>\n",
  "link": "/dist/en-us/docs/1.3.4/user_doc/docker-deployment.html",
  "meta": {}
}